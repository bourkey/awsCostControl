AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Owner:
    Type: String
    Default: 'awsCostControl'
  StopTag:
    Type: String
    Default: "shutdown"
  StartTag:
    Type: String
    Default: "startup"
  PolicyName:
    Type: String
    Default: "awsCostControl"
    
Resources:

  iamPolicyCostControl:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement": 
          - 
            Effect: "Allow"
            Action: 
              - "logs:CreateLogGroup" 
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          -
            Effect: "Allow"
            Action: 
              - "ec2:DescribeInstances"
              - "ec2:DescribeTags"
              - "ec2:StartInstances"
              - "ec2:StopInstances"
            Resource: "*"
      PolicyName: !Ref PolicyName
      Role: !Ref iamRoleCostControl
      
  iamRoleCostControl: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Ref iamPolicyCostControl
    DependsOn: 
      - !Ref iamPolicyCostControl

  lambdaStopInstances:
    Type: 'AWS::Lambda::Function'
    Properties: 
      Runtime: python3.6
      Environment:
        Variables:
          stopTag: !Ref StopTag
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt iamRoleCostControl.Arn
      Code:
        ZipFile: | 
          # import reqs
          import boto3, os
          # Lamba Handler
          def lambda_handler(event, context):
            ec2client = boto3.client('ec2')
            ec2 = boto3.resource('ec2')
            ec2RunningInstancesIDs = []
            stopTag = os.environ.get('stopTag')
            instances = ec2.instances.filter(
            # Filter Instances based On Tag, Check Current State
            Filters=[
              {'Name': "tag:" + stopTag, 'Values': ['true']}, {'Name': 'instance-state-name', 'Values': ['running']}])
            if not instances:
              exit(1)
            for instance in instances:
              ec2RunningInstancesIDs.append(instance.id)
            ec2client.stop_instances(InstanceIds=ec2RunningInstancesIDs)
            exit(0)

  lambdaStartInstances:
    Type: 'AWS::Lambda::Function'
    Properties:
        Runtime: python3.6
        Environment:
          Variables:
            startTag: !Ref StartTag
        Timeout: 30
        Handler: index.lambda_handler
        Role: !GetAtt iamRoleCostControl.Arn
        Code:
          ZipFile: | 
            # import reqs
            import boto3, os
            # Lamba Handler
            def lambda_handler(event, context):
              ec2client = boto3.client('ec2')
              ec2 = boto3.resource('ec2')
              ec2RunningInstancesIDs = []
              startTag = os.environ.get('startTag')
              instances = ec2.instances.filter(
              # Filter Instances based On Tag, Check Current State
              Filters=[
                {'Name': "tag:" + startTag, 'Values': ['true']}, {'Name': 'instance-state-name', 'Values': ['stopped']}])
              if not instances:
                exit(1)
              for instance in instances:
                ec2RunningInstancesIDs.append(instance.id)
              ec2client.start_instances(InstanceIds=ec2RunningInstancesIDs)
              exit(0)

  eventRuleStopInstances:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'costControl-StopInstances'
      Description: 'Event to Stop Instances'
      ScheduleExpression: '0 8 ? * * *'
      Targets:
        - !Ref lambdaStopInstances


  eventRuleStartInstances:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'costControl-StartInstances'
      Description: 'Event to Start Instances'
      ScheduleExpression: '0 19 ? * SUN-THU *'
      Targets:
        - !Ref lambdaStartInstances

  permissionStop:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref lambdaStopInstances
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com

  permissionStart:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref lambdaStartInstances
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com


